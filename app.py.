import logging
from flask import Flask, request, jsonify
import telegram
import os
import hashlib
import hmac
import base64
from fpdf import FPDF
# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞) ---
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
SECRET_KEY = os.environ.get("WAYFORPAY_SECRET_KEY")
if not TOKEN or not SECRET_KEY:
    logging.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TELEGRAM_BOT_TOKEN –∞–±–æ WAYFORPAY_SECRET_KEY. –ó–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –Ω–µ –º–æ–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏—Å—è.")
    exit(1)
bot = telegram.Bot(token=TOKEN)
app = Flask(__name__)
# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è FPDF –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∫–∏—Ä–∏–ª–∏—Ü—ñ ---
try:
    # –í–∞–∂–ª–∏–≤–æ: –§–∞–π–ª DejaVuSans.ttf –º–∞—î –±—É—Ç–∏ —É —Ç—ñ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —â–æ –π —Å–∫—Ä–∏–ø—Ç.
    FPDF.font_cache.add_font("DejaVuSans", "DejaVuSans.ttf", "DejaVuSans.pkl")
except Exception as e:
    logging.warning(f"–§–∞–π–ª —à—Ä–∏—Ñ—Ç—É DejaVuSans.ttf –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. PDF –º–æ–∂–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –∫–∏—Ä–∏–ª–∏—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–º–∏–ª–∫–∞: {e}")
# --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF ---
def generate_pdf(name):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("DejaVuSans", '', 16)
    pdf.cell(0, 10, f"AIShape: –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π —Ñ—ñ—Ç–Ω–µ—Å-–ø–ª–∞–Ω –¥–ª—è {name}", ln=True)
    pdf.set_font("DejaVuSans", '', 12)
    pdf.ln(10)
    pdf.multi_cell(0, 10, "üèãÔ∏è –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ 7 –¥–Ω—ñ–≤:\n–ü–Ω: –ü—Ä–∏—Å—ñ–¥–∞–Ω–Ω—è + –í—ñ–¥–∂–∏–º–∞–Ω–Ω—è\n–í—Ç: –ë—ñ–≥ + –ü—Ä–µ—Å\n–°—Ä: –°–ø–∏–Ω–∞ + –ü–ª–∞–Ω–∫–∞\n...")
    pdf.ln(5)
    pdf.multi_cell(0, 10, "üçΩÔ∏è –•–∞—Ä—á—É–≤–∞–Ω–Ω—è:\n–°–Ω—ñ–¥–∞–Ω–æ–∫: –Ø–π—Ü—è + –∞–≤–æ–∫–∞–¥–æ\n–û–±—ñ–¥: –ì—Ä–µ—á–∫–∞ + –∫—É—Ä–∫–∞\n–í–µ—á–µ—Ä—è: –†–∏–±–∞ + –æ–≤–æ—á—ñ\n...")
    file_path = "/tmp/aishape_plan_paid.pdf"
    pdf.output(file_path)
    return file_path
# --- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å—É WayforPay ---
def verify_signature(data, signature, secret_key):
    keys = sorted(data.keys())
    keys_for_signature = [k for k in keys if k != 'merchantSignature']
    signature_base = ';'.join([str(data[k]) for k in keys_for_signature])
    dig = hmac.new(secret_key.encode(), msg=signature_base.encode(), digestmod=hashlib.md5).digest()
    encoded = base64.b64encode(dig).decode()
    return signature == encoded
# --- –í–µ–±—Ö—É–∫ WayforPay ---
@app.route("/wayforpay_webhook", methods=["POST"])
def wayforpay_webhook():
    payload = request.json
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤–µ–±—Ö—É–∫: {payload}")
    signature = payload.get("merchantSignature")
    if not signature:
        logging.error("–í—ñ–¥—Å—É—Ç–Ω—ñ–π –ø—ñ–¥–ø–∏—Å merchantSignature —É –≤–µ–±—Ö—É–∫—É.")
        return jsonify({"reason": "Missing signature"}), 400
    if not verify_signature(payload, signature, SECRET_KEY):
        logging.error("–ù–µ–¥—ñ–π—Å–Ω–∏–π –ø—ñ–¥–ø–∏—Å WayforPay.")
        return jsonify({"reason": "Invalid signature"}), 403
    if payload.get("transactionStatus") == "Approved":
        try:
            telegram_id_str = payload.get("clientEmail", "").replace("telegram_", "")
            if not telegram_id_str:
                logging.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ Telegram ID —É –ø–æ–ª—ñ clientEmail.")
                return jsonify({"status": "error", "reason": "No Telegram ID"}), 400
            name = payload.get("customerName", "–ö–ª—ñ—î–Ω—Ç")
            file_path = generate_pdf(name)
            with open(file_path, 'rb') as pdf:
                bot.send_document(chat_id=int(telegram_id_str), document=pdf, filename="AIShape_ProPlan.pdf",
                                  caption="‚úÖ –î—è–∫—É—î–º–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –û—Å—å –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return jsonify({"status": "error"}), 500
    return jsonify({"status": "accept"}), 200
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 8080)))

